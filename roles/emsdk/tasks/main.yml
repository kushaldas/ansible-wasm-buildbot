---
- name: Install distro dependencies (Debian/Ubuntu)
  package:
    state: present
    name:
      - git
      - python3
      - xz-utils
      - bzip2
      - ccache
      - make
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install distro dependencies (Fedora)
  package:
    state: present
    name:
      - git
      - python3
      - which
      - xz
      - bzip2
      - ccache
      - make
  when: ansible_distribution == 'Fedora'

- name: Clone EMSDK git repo
  git:
    dest: "{{ emsdk_path }}"
    repo: https://github.com/emscripten-core/emsdk.git
    update: true
    force: true

- name: Check Emscripten version file
  ansible.builtin.stat:
    path: "{{ emscripten_version_file }}"
  register: version_file

- name: Read Emscripten version file
  ansible.builtin.slurp:
    src: "{{ emscripten_version_file }}"
  register: emscripten_version_slurp
  when: version_file.stat.exists

- name: Get Emscripten file version
  set_fact:
    emscripten_file_version: "{{ emscripten_version_slurp.content | b64decode | trim | replace('\"', '') }}"
  when: version_file.stat.exists

- name: Check whether we need to update
  set_fact:
    emscripte_needs_update: "{{ not version_file.stat.exists or emscripten_file_version != emsdk_version }}"

- name: Install EMSDK
  command: "{{ emsdk_path }}/emsdk install {{ emsdk_version }}"
  when: emscripte_needs_update

- name: Activate EMSDK
  command: "{{ emsdk_path }}/emsdk activate {{ emsdk_version }}"
  when: emscripte_needs_update

- name: chown/chmod EMSDK directory
  ansible.builtin.file:
    path: "{{ emsdk_path }}"
    recurse: true
    owner: root
    group: root
    mode: u+rwX,g+rX,o+rX

- name: Find latest EMSDK node
  ansible.builtin.find:
    paths: "{{ emsdk_path }}/node"
    patterns: "*64bit"
    file_type: directory
    recurse: false
  failed_when: emsdk_node_find.matched != 1
  register: emsdk_node_find

- name: Create node current directory
  ansible.builtin.file:
    path: "{{ emsdk_path }}/node/current/bin"
    state: directory
    owner: root
    group: root

# The wrapper script serves two purposes:
# 1) It provides a stable path that does not rely on node version.
# 2) It runs node with nice -n5 to work around
#    https://github.com/python/cpython/issues/94026 .
- name: Create node current wrapper script
  template:
    src: node.j2
    dest: "{{ emsdk_path }}/node/current/bin/node"
    owner: root
    group: root
    mode: '0755'

# cache emports as buildbot. embuilder clears outdated builds for us.
- name: Pre-build ports with embuilder
  ansible.builtin.command:
    cmd: "{{ emsdk_path }}/upstream/emscripten/embuilder build {{ item }}"
  with_items: "{{ embuilder_targets }}"
  environment:
    EM_COMPILER_WRAPPER: ccache
  register: embuilder_output
  changed_when: '" generating " in embuilder_output.stdout'
  become: true
  become_user: "{{ buildbot_user }}"

- name: Pre-build ports with embuilder
  ansible.builtin.command:
    cmd: "{{ emsdk_path }}/upstream/emscripten/embuilder build --pic {{ item }}"
  with_items: "{{ embuilder_targets }}"
  environment:
    EM_COMPILER_WRAPPER: ccache
  register: embuilder_output
  changed_when: '" generating " in embuilder_output.stdout'
  become: true
  become_user: "{{ buildbot_user }}"

- name: Add EMSDK to /etc/environment
  ansible.builtin.lineinfile:
    path: /etc/environment
    regexp: '^EMSDK='
    line: EMSDK="{{ emsdk_path }}"

- name: Add EM_CONFIG to /etc/environment
  ansible.builtin.lineinfile:
    path: /etc/environment
    regexp: '^EM_CONFIG='
    line: EM_CONFIG="{{ emsdk_path }}/.emscripten"

- name: Add EM_COMPILER_WRAPPER=ccache to /etc/environment
  ansible.builtin.lineinfile:
    path: /etc/environment
    regexp: '^EM_COMPILER_WRAPPER='
    line: EM_COMPILER_WRAPPER="ccache"

- name: Add EMSDK_NODE to /etc/environment
  ansible.builtin.lineinfile:
    path: /etc/environment
    regexp: '^EMSDK_NODE='
    line: EMSDK_NODE="{{ emsdk_path }}/node/current/bin/node"
